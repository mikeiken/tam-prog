name: Release
permissions:
  contents: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Get the latest release tag
      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag and strip "v" from the version
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          echo "::set-output name=latest_tag::$LATEST_TAG"

      # Bump the version based on the commit message
      - name: Bump version
        id: bump_version
        run: |
          LATEST_TAG=${{ steps.get_tag.outputs.latest_tag }}
          # Remove "v" prefix from the tag to work with plain version
          VERSION=${LATEST_TAG#v}
          echo "Current version: $VERSION"

          # Parse version into major, minor, and patch
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          # Get the latest commit message to determine version increment type
          COMMIT_MSG=$(git log -1 --pretty=%B)

          echo "Commit message: $COMMIT_MSG"

          # Determine version increment (major, minor, patch) based on commit message
          if [[ "$COMMIT_MSG" == *"#major"* ]]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif [[ "$COMMIT_MSG" == *"#feature"* ]]; then
            MINOR=$((MINOR+1))
            PATCH=0
          else
            PATCH=$((PATCH+1))
          fi

          # Form new version and tag
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"
          echo "New version: $NEW_VERSION"

          # Set outputs
          echo "::set-output name=new_version::$NEW_VERSION"
          echo "::set-output name=new_tag::$NEW_TAG"

      # Create a new tag and push it to the repository
      - name: Create new tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.bump_version.outputs.new_tag }}
          git push origin ${{ steps.bump_version.outputs.new_tag }}

      # Create a new release on GitHub
      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag }}
          release_name: Release ${{ steps.bump_version.outputs.new_version }}
          body: |
            Changes in this release:
            ${{ steps.bump_version.outputs.new_tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
