# run on commit
name: CI
permissions:
  contents: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  fetch-commit-message:
    runs-on: ubuntu-latest
    outputs:
      commit_message: ${{ steps.get_commit_message.outputs.message }}
    steps:
    - uses: actions/checkout@v4
    - name: "Fetch commit message"
      id: get_commit_message
      run: echo "::set-output name=message::$(git log -1 --pretty=%B)"

  check-no-ci:
    runs-on: ubuntu-latest
    needs: fetch-commit-message
    outputs:
      no_ci: ${{ steps.check_no_ci.outputs.no_ci }}
    steps:
    - name: "Check for [no_ci] in commit message"
      id: check_no_ci
      run: |
        if echo "${{ needs.fetch-commit-message.outputs.commit_message }}" | grep -iq '\[no_ci\]'; then
          echo "no_ci=true" >> $GITHUB_OUTPUT
        else
          echo "no_ci=false" >> $GITHUB_OUTPUT
        fi

  spellcheck:
    runs-on: ubuntu-latest
    needs: check-no-ci
    if: needs.check-no-ci.outputs.no_ci == 'false'
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: Install codespell
        shell: bash
        run: |
          sudo apt-get update || true
          sudo apt-get install -y codespell
      - name: Run Spellchecker
        run: codespell --skip "./frontend/yarn.lock"

  release:
    name: create-release
    runs-on: ubuntu-latest
    needs:
      - check-no-ci
      - spellcheck
    if: needs.check-no-ci.outputs.no_ci == 'false'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js (if your project uses it)
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Get current version
      id: version
      run: |
        VERSION=$(git tag --list --sort=-v:refname | head -n 1 | sed 's/v//')
        if [ -z "$VERSION" ]; then
          VERSION="0.0.0"
        fi
        echo "current_version=$VERSION" >> $GITHUB_ENV

    - name: Determine new version
      id: new_version
      run: |
        MAJOR=$(echo "${{ env.current_version }}" | cut -d. -f1)
        MINOR=$(echo "${{ env.current_version }}" | cut -d. -f2)
        PATCH=$(echo "${{ env.current_version }}" | cut -d. -f3)

        if git log --oneline origin/main..HEAD | grep -q 'major-change'; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif git log --oneline origin/main..HEAD | grep -q 'feature'; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi

        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version will be: $NEW_VERSION"

    - name: Create Release
      uses: actions/create-release@v1.1.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.new_version }}
        release_name: Release v${{ env.new_version }}
        generate_release_notes: true

    - name: Push tag
      run: |
        git tag v${{ env.new_version }}
        git push origin v${{ env.new_version }}
